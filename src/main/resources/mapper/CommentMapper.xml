<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace：该mapper.xml映射文件的 唯一标识 -->
<mapper namespace="com.clf.blog.dao.CommentRepository">
    <resultMap id="comment_blog_map" type="Comment">
        <id property="id" column="id"></id>
        <result property="nickname" column="nickname"></result>
        <result property="email" column="email"></result>
        <result property="content" column="content"></result>
        <result property="avatar" column="avatar"></result>
        <result property="createTime" column="create_time"></result>
        <result property="adminComment" column="admin_comment"></result>
        <association property="blog" javaType="Blog">
            <id property="id" column="blog_id"></id>
            <result property="title" column="title"/>
        </association>
        <association property="parentComment" javaType="Comment">
            <id property="id" column="parent_comment_id"></id>
            <result property="nickname" column="parent_comment_nickname"></result>
        </association>
        <!--		<collection property="replyComments" ofType="Comment">-->
        <!--			<id property="id" column="parent_comment_id"></id>-->
        <!--		</collection>-->
    </resultMap>

    <select id="selectCommentsByBlogId" parameterType="Long" resultMap="comment_blog_map">
        select t2.id,t2.nickname,t2.email,t2.content,t2.avatar,t2.create_time,
        t2.blog_id,t2.parent_comment_id,t2.parent_comment_nickname,t2.admin_comment
        from t_blog t1,t_comment t2
        where t1.id=t2.blog_id
        and t2.blog_id=#{blog_id}
        order by create_time asc
    </select>

    <insert id="saveComment" parameterType="Comment">
        insert into t_comment values (#{id},#{nickname},#{email},#{content},#{avatar},
        #{createTime},#{blog.id},#{parentComment.id},#{parentComment.nickname},#{adminComment})
    </insert>

    <select id="selectCommentByParentCommentId" parameterType="Long" resultMap="comment_blog_map">
        select t1.id,t1.nickname,t1.email,t1.content,t1.avatar,t1.create_time,t1.blog_id,
        t1.parent_comment_id,t1.parent_comment_nickname from t_comment t1 where t1.id = #{parentCommentId}
    </select>

    <delete id="deleteCommentByBlogId" parameterType="Long">
        delete from t_comment where blog_id=#{blog_id}
    </delete>

    <update id="updateAdminComment">
        update t_comment set nickname=#{nickname},email=#{email} where admin_comment=1
    </update>

    <select id="selectCommentCount" parameterType="Long" resultType="Long">
        select count(*) from t_comment where blog_id=#{blog_id};
    </select>

    <select id="selectComments" resultMap="comment_blog_map">
        select t2.id,t2.nickname,t2.content,t2.create_time,
        t1.title,t2.parent_comment_nickname
        from t_blog t1,t_comment t2
        where t1.id=t2.blog_id
        order by create_time desc
    </select>

    <delete id="deleteComment" parameterType="Long">
        delete from t_comment where id=#{id}
    </delete>

    <select id="selectNickName" parameterType="String" resultType="Long" >
        select count(*) from t_comment where nickname=#{nickname}
    </select>

    <delete id="deleteCommentByNickName" parameterType="String">
        delete from t_comment where nickname=#{nickname}
    </delete>

</mapper>
